env {
  job.name = "mysql_inventory_cp_json_DebeziumSrc02_my_orders__console"
  execution.parallelism = 2
  job.mode = "STREAMING"
  checkpoint.interval = 5000
  job.retry.times = 3
  job.retry.interval.seconds = 10
}


source {
  Kafka {
    plugin_output = "fake1"

    bootstrap.servers = "broker:29092"
    topic = "mysql_inventory_cp_json_DebeziumSrc02_my_orders"
    consumer.group = "seatunnel_mysql_inventory_cp_json_DebeziumSrc02_my_orders__console"
    format = "debezium_json"
    debezium_record_include_schema = false
    start_mode = latest
    kafka.config = {
      auto.offset.reset = "latest"
      enable.auto.commit = "true"
      max.partition.fetch.bytes = "5242880"
      session.timeout.ms = "30000"
      max.poll.records = "100000"
    }
    common-options { 
      max.poll.interval.ms = 600000 
      session.timeout.ms = 60000 
      request.timeout.ms = 120000
    }

    schema = {
      fields {
        before {
          id = "int"
          order_id = "string"
          supplier_id = "int"
          item_id = "int"
          status = "string"
          qty = "int"
          net_price = "int"
          issued_at = "int"
          completed_at = "int"
          spec = "string"
          created_at = "int"
          updated_at = "int"
        }
        after {
          id = "int"
          order_id = "string"
          supplier_id = "int"
          item_id = "int"
          status = "string"
          qty = "int"
          net_price = "int"
          issued_at = "int"
          completed_at = "int"
          spec = "string"
          created_at = "int"
          updated_at = "int"
        }

        op = "string"
        ts_ms = "int"
      }      
    }
  }
}



sink {
  Console {
    plugin_input = ["fake1"]

    log.print.data = true
    log.print.delay.ms = 1000
  }
}